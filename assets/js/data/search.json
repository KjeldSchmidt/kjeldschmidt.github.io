[ { "title": "Styling Flashy Quotes for an E-Ink Screen", "url": "/posts/styling-flashy-quotes/", "categories": "creative, programming, design", "tags": "creative, hardware, decorative, recreational, e-ink, raspberry-pi", "date": "2025-10-19 02:00:00 +0200", "snippet": "The time of the affordable e-ink is finally here. I’ve wanted a decent-sizede-ink screen for nearly a decade now - basically ever since I became interestedin microelectronics back in 2016 - and in the year of the lord 2025, theyare finally a reality. I nearly bought a TRMNL at thestart of the year, and the project still looks quite good. But I’ve delayedmajor purchases for the first months of transitioning to freelance, and by the time I could confidently put down the money, the Pimoroni Inky Impression 13.3” had releasedand offered something that interested me much more.A pure screen without an operating system and six colors! I could do anything Iwant, as long as I also do a lot of additional things, like managing my ownrapberry pi, building a nice housing and managing batteries if I want it tooperate cordless (the TRMNL claims 2-6 months of operating time. My single attempt to run my screen from a thin external battery died in less than 48 hours. I have not tried it since.)But the display capabilities give me a nice warm buzz. Something about it makesa lot of mundane graphics look very cool to my eyes, and I’m excited to get aneasy outlet to push more things that I like into the faces of the people thatvisit my home. The general plan is that the display will be purely decorative,featuring things such as cool art, comics strips and jokes (XKCD should be a gold mine for this), album art (taken from spotify based on what’s currentlyplaying) and more.One of these “and more” is the thing I’ve implemented over the past two days: quotes and text snippets, to be easily added by myself or any visitor. From songlyrics to party bloopers, the possibilities for this are obvious and endless.I wanted my visitors to have a very low barrier to entry for adding quotes, butalso have some level of control over layout, colors, emphasis and highlights.To that end, I’ve built asimple text layout frontend (Try it here!)that gives some sensible defaults and randomness to support quickly achievingsomething aesthethic, with some amount of customization built in.Importantly, in the preview, every word can be clicked to override the globalsettings. If you want to highlight two words in a row? Gotta click twice and setthem both up accordingly. This isn’t a tool for professional layout, this is forminimum friction splash screens.While developing the frontend, I made heavy use of my cursor subscription. I keep finding the same thing: LLM-assisted coding is most useful for doing a lotof work that I am conceptually capable of, but not very fast at. It generated mean entirely first draft of a functional text layout engine in a single prompt,in a minute flat. This is all the more important for a hobby-project. I couldhave written this from scratch if I was paid for it, but I’m doing this purelyfor myself - my attention span and motivation only reach so far until I getdistracted and pick up another project. As a tool to get me over the finishline, I highly appreciate the LLM support.Even so, getting to the point where it actually did exactly what I wanted tooka full day of focused work to develop all the features, select the appropriatecolors1, pick a nice set of fonts (I want something flashy, not20 Arial derivatives), make it work across screen sizes, test and rejectideas2 and test over and over again that interactions allwork and no regressions make it through (there were a ton. I don’t blame the LLMtoo much, I’m sure I would have made a lot of the same mistakes.)I also got the LLM to give itself a seizure when I asked it to insert quotes from a few famous people to give a nice “greeting” on the first load to thewebsite. I asked it for curly quote marks (“Like this”) around the phrases, butit seemed to reliably “accidentally” output ASCII quotes (“like these”), thusbreaking string termination and getting struck in a thought spiral.For now, the resulting image is sent to the device controlling the screen andstored as a proper png. I can easily see a feature where I store a much smallerset of data instead. This could be directly used for compression (storing theoriginal text with some styling metadata would be trivially less than akilobyte, while the pngs come out to a respectable 50-80KiB). But I would findit much more interesting to store only some of the metadata - the relativefont scaling applied to individual words, as well as differences in emphasis andcolor. A single styled quote could then be re-generated into a variety ofactual renderings, where the exact fonts and colors are not kept, but whichthings differ in what aspects are consistent.Actually putting quotes from the tool to the screen currently only works on theversion of the page hosted in my home network, not on the copy hosted on thisblog. If you make something cool with it, I’d love to see it though, please sendit to me!Here’s a small selection of what I’ve done with the screen (and the quote styler) so far:A paragraph from the first episode of Welcome To Night Vale, typeset with thelayout tool“Fuck Literature”, a quote by Ernest Hemingway, typeset with the layout toolAn illustration from Gunnerkrigg Court,an excellent webcomicA color chart, showing that dark colors are displayed more reliably thanlightonesThat’s all, thanks, bye! I ended up needing to create a basic color mapping, with one set of RGB colors for displaying on the web frontend mapped to a different set of RGB values to actually get a perceptual match on the e-ink screen. Telling the screen to show █████ results in a color best approximated by █████. &amp;#8617; A full RGB color picker was rejected because it was too easy to get unpleasant results with the dithering - especially since access to the full color space made perceptual color matching much harder. The dithering algorithm works great on gradients and saturated/dark colors (I’ve managed a beautiful rich purple), but struggles with light pastels. &amp;#8617; " }, { "title": "The task-driven repository", "url": "/posts/the-task-driven-repository/", "categories": "Software Development", "tags": "software development, leadership", "date": "2025-09-12 02:00:00 +0200", "snippet": "I’ve written before about the do-script, but I didn’texactly go into details about what makes it so powerful. I’ve used it as areference for myself dozens of times, but that could have been achieved with a Gist just as well.So today, I want to explain properly how the task-file can play a central rolein high-quality repositories." }, { "title": "Loudly adding complexity: A lesson on leadership", "url": "/posts/loudly-adding-complexity/", "categories": "Software Development", "tags": "software development, leadership", "date": "2023-12-21 01:00:00 +0100", "snippet": "Once upon a time, I had a split-second thought that something done by a fellowdeveloper in a team was “the exact opposite of leadership”, based on themchanging an established pattern1, and doing so quietly, withoutasking the team before or telling the team after.I wanted to explore that thought - was it just a fleeting moment of annoyance orwas there some deeper insight in there? With the word “leadership” lodged in mybrain, I thought about a mentor and former tech lead of mine, and I rememberedsome of the things he did without consulting the team. He deleted manual approval gates for deploying to our staging environments He deleted some alerts from our monitoring system He deleted many cards and stories from the backlogAll that without telling anyone. So why didn’t it annoy me back when he didsneaky stuff, while I am bothered now? On reflection, the answer is ratherobvious.He saw issues with the status quo and quietly removed things that he suspectedwere painful obstacles and unnecessary overhead, but which the team might havedefended due to status quo bias, if he had consulted us first. So he did itquietly and waited to see if anyone would notice or complain.That is to say, he quietly reduced complexity2.But when he added complexity, he shouted from the rooftops for all to hear.Finally adding tfsec to our pipelines was a massively important late additionto our process, and while he did the setup without announcement, he turned tothe team the moment it was ready and told us: “We can do this now. I’ve paidthe up-front cost myself, and now we can decide as a team if we want to pay theongoing maintenance cost. Please try it out and give feedback.”In other words, he loudly added complexity.But my teammate quietly added complexity, by creating a scenario that willinevitably lead to questions - “why do we do the same thing in two differentways? what’s the pattern here? who do I have to ask? is our config secretlyborked due to conflicts in the approaches?” - all while not leaving a morsel ofdocumentation or communication behind which would allow other team members tofind answers, other than to use the poorly named git blame on the unusualpiece of code.And that’s the lesson: a good leader shouldn’t quietly increase complexity. Ifyou do something in secret, you better be confident that it reduces mentaloverhead for everyone, rather than increasing it. And if you increasecomplexity, you better be loud about it. A configuration thing, which all of our repository handle in a single file in the root directory. The dev in question made some config changes inline instead, even though they knew the established pattern. &amp;#8617; And all of these changes were easily reversible if any of us had complained. &amp;#8617; " }, { "title": "Paintfuck: Brainfuck for art", "url": "/posts/Paintfuck/", "categories": "esolang", "tags": "esolang, brainfuck, creative", "date": "2023-10-27 02:00:00 +0200", "snippet": "Susam Pal’s minimal drawing languageCRF[] recently got some attention onr/programming, quicklyfollowed by the slightly more interactive CFRS[] variant(website,reddit).I found it very enjoyable to play around with, but while I did, I constantlythought about how much the heavy reliance on [] as a looping constructmakes it look like Brainfuck, and howit could be very fun to have the same interface available for drawing in Brainfuck.So I forked her code and made Paintfuck (try here)!I knew from the beginning that I wanted the canvas itself to be the tape, but Iconsidered a bunch of options for how color would work. Each cell could havethree data pointers, for HSV or RGB? But then you’d need a lot of differentinstructions. Expose just hue or just lightness via the tape value? Maybecombine three independent cells on the tape to select a color? Add an extra bitto determine whether the cell is rendered at all?In the end, I went with a very simple approach, that I found visually satisfying:Just use the same base colors present in CRF[], and cycle through them mod 8.This enables high contrast and funky patterns, that still give a nice visualimpression for what is happening computationally. I might add other color modeslater, if I feel the need to encode a jpeg in Paintfuck.First ImpressionUnlike CRF[], it is hard to get Paintfuck to do something that looks cool andinteresting. For a while, I even struggled to just flood a line with color(it’s just -[&amp;gt;+]+ btw), but I kept thinking, reasoning and experimenting untilI had a pretty decent grasp of some “primitive” shapes and operations.One thing I absolutely still want to do, but haven’t quite managed at time ofwriting, is implementing a Rule 110run. It is definitely possible, but I have real-life obligations upcoming, so Idecided to publish it without that particular demo.Here are pictures of my current demo programs:DemosA simple dotted pattern, created by &amp;lt;----[&amp;gt;+&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;V++++]&amp;gt;-Diagonal colored stripes, intentionally finite, created byVVVV&amp;gt;+++++++[&amp;lt;++++++++&amp;gt;-]&amp;lt;[&amp;gt;&amp;gt;&amp;gt;+++++++[&amp;lt;++++++++&amp;gt;-]^[V+^-]V+[[&amp;gt;]&amp;lt;[-&amp;gt;+&amp;gt;+&amp;lt;&amp;lt;]&amp;gt;&amp;gt;[-&amp;lt;&amp;lt;+&amp;gt;&amp;gt;]&amp;lt;+[&amp;lt;]&amp;gt;-]&amp;lt;&amp;lt;-[-V+^]V]Simple lines, mostly showing off how to “fill” a complete line.VVVV--[&amp;gt;+]++V&amp;gt;&amp;gt;&amp;gt;&amp;gt;^^^^-----[V+]---&amp;lt;&amp;lt;&amp;lt;&amp;lt;^-[&amp;gt;V+]+Hey, this kinda looks like the pattern on a bus seat from the 90’s.+++[&amp;gt;&amp;gt;&amp;gt;+++++++[&amp;lt;++++++++&amp;gt;-]&amp;lt;[[&amp;gt;]&amp;lt;[-&amp;gt;+&amp;gt;][&amp;lt;]&amp;gt;-]&amp;lt;&amp;lt;-[-V+^]V]A simple face, disappointed by the lack of detail and care taken in the drawing of itself.VVVVVVVVVVVVVVVVVVVV&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;++++++++++++[&amp;gt;+&amp;gt;+&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;[[&amp;gt;]+[&amp;lt;]&amp;gt;-][&amp;lt;]&amp;gt;[-&amp;lt;+&amp;lt;+&amp;gt;&amp;gt;]&amp;lt;&amp;lt;[&amp;gt;&amp;gt;+&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;[[V]+[^]V-]&amp;lt;[&amp;gt;V[V]&amp;lt;+&amp;gt;^[^]&amp;lt;-]&amp;gt;V[V]&amp;lt;[-&amp;gt;+&amp;lt;]&amp;gt;[[&amp;gt;]+[&amp;lt;]&amp;gt;-]&amp;gt;[&amp;gt;]^+[^+&amp;lt;[&amp;gt;-]&amp;gt;]&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;VVV++++++++++++[&amp;gt;+&amp;gt;+&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;[[&amp;gt;]+[&amp;lt;]&amp;gt;-][&amp;lt;]&amp;gt;[-&amp;lt;+&amp;lt;+&amp;gt;&amp;gt;]&amp;lt;&amp;lt;[&amp;gt;&amp;gt;+&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;[[V]+[^]V-]&amp;lt;[&amp;gt;V[V]&amp;lt;+&amp;gt;^[^]&amp;lt;-]&amp;gt;V[V]&amp;lt;[-&amp;gt;+&amp;lt;]&amp;gt;[[&amp;gt;]+[&amp;lt;]&amp;gt;-]&amp;gt;[&amp;gt;]^+[^+&amp;lt;[&amp;gt;-]&amp;gt;]&amp;gt;&amp;gt;&amp;gt;++++++++[-[^+V-]^]&amp;lt;&amp;lt;&amp;lt;++++++++++++[--&amp;lt;+&amp;lt;+&amp;gt;&amp;gt;[V&amp;lt;&amp;lt;+&amp;gt;&amp;gt;^-]&amp;lt;&amp;lt;V]&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;^^^^++++++++++++[--&amp;lt;+&amp;lt;+&amp;gt;&amp;gt;[^&amp;lt;&amp;lt;+&amp;gt;&amp;gt;V-]&amp;lt;&amp;lt;^]&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;+++++++[&amp;gt;++++++&amp;lt;-]&amp;gt;[-[V+^-]V]&amp;gt;&amp;gt;&amp;gt;++++++[&amp;lt;++++++++&amp;gt;-]&amp;lt;-[[&amp;gt;]+[&amp;lt;]&amp;gt;-]Three boxes, showing off the ‘rounded rectangle’ function++++++[&amp;gt;+&amp;gt;+&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;[[&amp;gt;]++++++[&amp;lt;]&amp;gt;-][&amp;lt;]&amp;gt;[-&amp;lt;+&amp;lt;+&amp;gt;&amp;gt;]&amp;lt;&amp;lt;[&amp;gt;&amp;gt;+&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;[[V]++++++[^]V-]&amp;lt;[&amp;gt;V[V]&amp;lt;+&amp;gt;^[^]&amp;lt;-]&amp;gt;V[V]&amp;lt;[-&amp;gt;+&amp;lt;]&amp;gt;[[&amp;gt;]++++++[&amp;lt;]&amp;gt;-]&amp;gt;[&amp;gt;]^+[^+&amp;lt;[&amp;gt;-]&amp;gt;]&amp;gt;&amp;gt;&amp;gt;VVV+++++++++[&amp;gt;+&amp;gt;+&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;[[&amp;gt;]++[&amp;lt;]&amp;gt;-][&amp;lt;]&amp;gt;[-&amp;lt;+&amp;lt;+&amp;gt;&amp;gt;]&amp;lt;&amp;lt;[&amp;gt;&amp;gt;+&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;[[V]++[^]V-]&amp;lt;[&amp;gt;V[V]&amp;lt;+&amp;gt;^[^]&amp;lt;-]&amp;gt;V[V]&amp;lt;[-&amp;gt;+&amp;lt;]&amp;gt;[[&amp;gt;]++[&amp;lt;]&amp;gt;-]&amp;gt;[&amp;gt;]^+[^+&amp;lt;[&amp;gt;-]&amp;gt;]&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;VVVVV+++++++++++++[&amp;gt;+&amp;gt;+&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;[[&amp;gt;]++++[&amp;lt;]&amp;gt;-][&amp;lt;]&amp;gt;[-&amp;lt;+&amp;lt;+&amp;gt;&amp;gt;]&amp;lt;&amp;lt;[&amp;gt;&amp;gt;+&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;[[V]++++[^]V-]&amp;lt;[&amp;gt;V[V]&amp;lt;+&amp;gt;^[^]&amp;lt;-]&amp;gt;V[V]&amp;lt;[-&amp;gt;+&amp;lt;]&amp;gt;[[&amp;gt;]++++[&amp;lt;]&amp;gt;-]&amp;gt;[&amp;gt;]^+[^+&amp;lt;[&amp;gt;-]&amp;gt;]Another colored mess, except I created this one with intent. If the timelapsefunction were properly implemented, it would look really cool to watch this grow.&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;+&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;-[-[&amp;gt;-&amp;lt;+&amp;gt;]+V&amp;gt;+V&amp;gt;+V&amp;lt;[&amp;gt;-&amp;lt;+&amp;gt;]+V&amp;lt;+V&amp;lt;+]Technical issues, please hold. The code for this could definitely be shortened,by seeding the color for each row first and then copying that into a full line.VVVV++++++++[&amp;gt;&amp;gt;&amp;gt;+++++++[&amp;lt;++++++++&amp;gt;-]&amp;lt;-[[&amp;gt;]+[&amp;lt;]&amp;gt;-]&amp;lt;&amp;lt;-[-V+^]V]++++++++[&amp;gt;&amp;gt;&amp;gt;+++++++[&amp;lt;++++++++&amp;gt;-]&amp;lt;-[[&amp;gt;]++[&amp;lt;]&amp;gt;-]&amp;lt;&amp;lt;-[-V+^]V]++++++++[&amp;gt;&amp;gt;&amp;gt;+++++++[&amp;lt;++++++++&amp;gt;-]&amp;lt;-[[&amp;gt;]+++[&amp;lt;]&amp;gt;-]&amp;lt;&amp;lt;-[-V+^]V]++++++++[&amp;gt;&amp;gt;&amp;gt;+++++++[&amp;lt;++++++++&amp;gt;-]&amp;lt;-[[&amp;gt;]++++[&amp;lt;]&amp;gt;-]&amp;lt;&amp;lt;-[-V+^]V]++++++++[&amp;gt;&amp;gt;&amp;gt;+++++++[&amp;lt;++++++++&amp;gt;-]&amp;lt;-[[&amp;gt;]+++++[&amp;lt;]&amp;gt;-]&amp;lt;&amp;lt;-[-V+^]V]++++++++[&amp;gt;&amp;gt;&amp;gt;+++++++[&amp;lt;++++++++&amp;gt;-]&amp;lt;-[[&amp;gt;]++++++[&amp;lt;]&amp;gt;-]&amp;lt;&amp;lt;-[-V+^]V]++++++++[&amp;gt;&amp;gt;&amp;gt;+++++++[&amp;lt;++++++++&amp;gt;-]&amp;lt;-[[&amp;gt;]+++++++[&amp;lt;]&amp;gt;-]&amp;lt;&amp;lt;-[-V+^]V]Potential ImprovementsThe current state of Paintfuck is definitely both usable and fun, but there aresome improvements that could be made:CustomisationThe color mode, canvas size and limits such as the maximum number of operationsand maximum code length are all arbitrary and have been selected to work for me,in my early stages of experimentation. Technically, there’s no reason that Ishouldn’t expose customisation for this.Animation and debugging toolsI experimented with letting the interpreter run slowly, and changing the stateof the canvas in an observable way. This resulted in some really cool animation,but didn’t immediately play nice with changing the code mid-animation. It wouldbe cool to offer an observable interpretation (with customisable delays andstepping, akin to Brainfuck Visualizer).Since this kind of falls into the category of “debugging/dev tools”, why notexpose the entire GridTape state on demand?Versions of CRF[] created after my fork also include the ? command, whichoutputs a lot of helpful information right on page. I might want to steal that.Technically, there’s no reason to not allow inline comments by ignoring allnon-instructional input.Image (and video?) exportWhile you can export the resulting image by just right-clicking the canvas, thismight not be obvious to everyone (I didn’t realise it until I wanted to savepictures for the demo section of this blog post).Offering a simple ‘Download’-button would be nice. And while we’re at it, whynot combine it with the animation mentioned in the previous section anddirectly offer a download of the animation of the image being drawn?OptimizationIn theory, repeated position shifts and additions can easily be ‘grouped’ fora quick win in the performance department. This will probably not be necessaryuntil I offer custom resolution, where bigger canvases have ever-increasingportions of their operations dedicated to just traversing the data pointeracross space.Closing ThoughtsThanks for reading! If you’ve made it this far, I would love it if you went toactually try Paintfuck and maybe showed me someof the cool things you made and/or gave me feedback on the whole thing." }, { "title": "I think you should use a do-script", "url": "/posts/use-a-do-script/", "categories": "Software Development, Software Engineering", "tags": "software development, software engineering", "date": "2022-08-09 02:00:00 +0200", "snippet": "Let’s get to the point: I think you should have a do-script in your project I’ll explain what that even is and why I think you should have one The only reason I’m writing about it is that I can’t find any sources online This might be because the term “do-script” is incredibly generic and hard to google. It might also be because the concept isn’t all that popular, or generally known under a different name. I’m not gonna try to find a more marketable term. You’re already here. There’s a lot of “why” coming up. If you’re future me and just need the code, scroll to the bottom.Alright, a definition: A do-script contains a code-as-documentation, version-controlled list of actions that a developer might want to perform when working on the code-base.Ever found yourself verbally explaining how to compile a project? Searched your shell history to remember what command invokes the autoformatter? Is your environment setup meticulously explained in your project’s README, with liberal use of code blocks showing which commands to put into the terminal?Then you need a do-script.If a common operation is known to the developers, but not written down (or written down outside of the repository), put it down, in executable code. If a common operations is already documented as code, as is frequently the case in README-files, move it into an executable file.Okay, enough of the marketing, let’s show how this works. In my (entirely facetious) current project, there exists a file called do at the root of the project. If I didn’t know already, the README would helpfully tell me that I should try running it in a terminal.&amp;gt; ./doUsage: ./do setup-venv Creates the virtual environment for the project and installs all dependencies run Runs the webserver locally test Runs fast unit tests test-e2e Runs slow e2e tests fmt-check Checks if all files follow the formatting style fmt Applies the autoformatting style deploy Deploy the code to a specificed environment, given as the first argumentAnd if I wanted to, say, run unit tests after making some code changes, I would simply do&amp;gt; ./do test&amp;lt;Test framework output&amp;gt;And at this point in time, I don’t have to care about what exact command to invoke, what parameters to pass, I don’t even have to activate the virtual environment - the do-script does all that for me. And if I do want to know, I can just look at the script!Discoverability and MaintainabilityThe power of the do-script is threefold.First, documentation - it encourages you to put knowledge that exists in your head or in non-executable documentation into an executable context.This means that people will actually use this code, which means people will notice if things become outdated and they’ll update them.We all known very well that this would not be the case for non-executable documentation.Second, discoverability - it allows new team members to easily discover what things are important and which are not. Gradle tasks, for example, do something similar: there is a list of actions that can be taken through Gradle for a given project. But in my experience, those are often overwhelming. Applying a single gradle plugin often introduces a handful of commands, only one of which is actually relevant for the project. How are we gonna figure out whether we want to use ./gradlew SpotlessApply or ./gradlew SpotlessJavaApply or whatever else?Well, if we have a do-script, we can know that there is one command to format, and just use it. If we ever care about details, we can look at the source, or we can just not. No need to ask someone who’s more experienced on the project (not that I want to discourage communication - I want to encourage talking about team practices, project context and business details, not how to invoke the damn formatter)And third, maintainability. Does the build process rely on some specific IDE setup? This can be fine in some cases, but for a long-lived project, you probably don’t want to get tied to specific IDEs or even specific versions. If you have a shell-driven process, you remove a lot of dependencies. Even better if the script itself takes care to install all dependencies that are still needed.And actually, since the script already performs so much setup and encodes quality gates…CI/CD and the do-script…we can and should use it in our CI/CD-pipeline! What better way to make sure that the executable documentation stays up-to-date and accurate than making it a core component of your deployment system?There are a bunch of different CI/CD systems with a bunch of different ways to perform common actions. But all of them also allow you to just invoke a bash command. Why not decouple yourself from the CI/CD runtime at least a little bit by invoking your do-script instead of using a runtime-specific solution? Chances are, there is large overlap between the things you want to run locally and those you want to run in CI/CD. And you are absolutely allowed to pass parameters or check for environment variables to adapt the execution logic between developer machines and pipeline machines!Be pragmaticThe do-script is supposed to be a living document, a testament to the ways the project is being used. Change it when needed, ignore edge-cases when they seem too complicated, have several do-scripts in subfolders. Don’t make it the subject of business requirements.Also, call it do, not do.sh. Solely and exclusively because it’s faster to type. For the same reason, the tasks in our above example was called “fmt-check”, not “format_check”.And finally, code:Alright, here’s the content for a baseline do-script.#!/usr/bin/env bash## example-thing: Perfoms a thing or somethingfunction task_example_thing { echo &quot;Doing very important work, I swear&quot;}function internal_helper_function { echo &quot;I will not be listed in the tasks for this file&quot;}#-------- All task definitions go above this line --------## Bash Strict Mode - For details, see# https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425set -u # Raise error when using undefined variablesset -e # Raise error if any command has a non-zero exit status# set -x # Enable this optionally to print every command executed by bashset -o pipefail # Prevent pipelines from masking errorsfunction task_usage { echo &quot;Usage: $0&quot; sed -n &#39;s/^##//p&#39; &amp;lt;&quot;$0&quot; | column -t -s &#39;:&#39; | sed -E $&#39;s/^/\\t/&#39;}cmd=${1:-}shift || trueresolved_command=$(echo &quot;task_${cmd}&quot; | sed &#39;s/-/_/g&#39;)if [[ &quot;$(LC_ALL=C type -t &quot;${resolved_command}&quot;)&quot; == &quot;function&quot; ]]; then pushd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;gt;/dev/null ${resolved_command} &quot;$@&quot;else task_usage if [ -n &quot;${cmd}&quot; ]; then echo &quot;&#39;$cmd&#39; could not be resolved - please use one of the above tasks&quot; exit 1 fifiLet’s see some action:&amp;gt; ./doUsage: ./do example-thing Perfoms a thing or something&amp;gt; ./do example-thingDoing very important work, I swear&amp;gt; ./do example_thingDoing very important work, I swear&amp;gt; ./do unknown-taskUsage: ./do example-thing Perfoms a thing or something&#39;unknown-task&#39; could not be resolved - please use one of the above tasksNote that tasks can only be invoked if their function definition has a task_-prefix. This means we can have helper functions which are not “exposed”. This is purely to remove noise - nothing about the do-script as such is secretive, of course.Note also that the tasks listed is generated by looking for lines that start with ##, so there is still a hint of non-living code here. In my experience, that’s okay - since these tasks are actively being used, and the list of tasks looked at, discrepancies are quickly discovered and can be fixed immediately, since the “interface” is not external in any way.That’s it. Have a splendid time." }, { "title": "A wedding photo box", "url": "/posts/wedding-photo-box/", "categories": "Woodworking", "tags": "woodworking, laser engraving, laser, creative", "date": "2022-05-01 02:00:00 +0200", "snippet": "Photobox for the wedding of my sister.The box is assembled without glue, so that the sides can be wall-mounted permanently.These side-panels came with hooks pre-installed for easy installation on the walls later.The main body of the box is made from bamboo, the legs are made from Acacia scrap.The images are laser-engraved, making them highly scratch-resistant.At this point, I am still not entirely happy with my process for converting faces to laser-engravings.While my process, consisting of isolating image components in Photoshop, then converting each component intopaths individually via Lightburn, works great on many things, it still frequently creates somewhat, frankly speaking, scary, faces.The camera on the inside was WiFi-controlled, using an old phone as a preview and trigger.According to my sister, the reveal of the box was the first time she couldn’t stop herself from crying during her wedding weekend.Mission Accomplished." }, { "title": "Unary Semantic Versioning", "url": "/posts/unaver/", "categories": "websites, quick build", "tags": "humor, one day build", "date": "2022-04-17 02:00:00 +0200", "snippet": "Today, I created the unaver.org website as a spoof ofsemantic versioning. There’s not much to say about it - as you can see on thelinked page, Unary Semantic Versioning is the future of software versioning,the ultimate solution. Enjoy reading.Update, 2024: As I don’t want to keep paying the domain cost for a silly joke, the page is now hosted under my personal domain for posterity." }, { "title": "Fetlang is turing complete", "url": "/posts/fetlang-turing-complete/", "categories": "computer science, quick build, esolang", "tags": "humor, computer science, turing complete", "date": "2017-10-11 02:00:00 +0200", "snippet": "Recently, the esoteric programming language Fetlang was linked and discussedon /r/programming. On theproject’s GitHub page I noticed somethingin its list of features: Probably Turing completeis what it used to say. I decided to do something about that and try to proveits Turing completeness. Initially I wanted to do Conways Game of Life,always a fun project, but Fetlang’s dense and unwieldy syntax made me drop downto easy mode: Rule 110, a much simpler Turing complete cellular automaton. Thewhole project took me around five hours, most of which were spent trying tofigure out how to handle the two only data types. I’ll run you trough myprocess, which should also help you a lot if you ever decide you need to writeerotica while at work. Note that this overview is entirely functional andignores the many unique features of Fetlang which enables you make your codemore prosaic, such as possessives and pronouns.Understanding FetlangUnderstanding the Data TypesFetlang has but two data types: Fractions and Chains. Fractions are what they say: Rational, non-float numbers. If they happen to have an ASCII-value, they can be printed to screen. Chains are linked lists of fractions and can be initialized by string literals. Fractions cannot be initialized by normal integer literals - rather, you have to spell out the numbers. Types are not changeable after initialization.Initializing, setting and resettingThe following code will show you how to initialize variables( Parens make comments )( Erik is a fraction variable. The following code assumes &quot;standalone&quot; lines, i.e. a previously uninitialized variable )Worship Erik ( Sets Erik to 0. Worship multiplies, by 1 if no second argument is given. Erik is not initialized, but from context, must be a fraction, set to 0 by default)Lick Erik ( Sets Erik to 1. Lick adds, adding 1 if no second argument is given. Since Erik defaults to 0, he is licked once, hence Erik is 1)Lick Erik forty five times ( Sets Erik to 45 )( And if Erik is already set and needs to be reset )Have Erik spank Erik ( Resets Erik to 0, by spanking (subtracting) him from himself )( Tiffany is a Chain Variable )Make Tiffany moan ( Declares Tiffany to be an empty chain. Can also be used to reset, if already set )Make Tiffany moan &quot;Wow, that&#39;s nice&quot; ( String literals work. Concatenating is not directly possible )So far, so easy.Control FlowComparisionsComparing numbers is easy enough:(Set Anna to 1 and Betty to 2)Lick AnnaLick Betty two times( Anna &amp;gt; Betty )If Anna is dominant towards Betty( Anna == Betty )If Anna is Betty( Anna &amp;lt; Betty )If Anna is submissive to Betty( Anna != Betty )If Anna is not BettyHowever, there is no direct way to compare chains, and figuring out a correct way to do this was the hardest part for me.The Bind Operator (“Bondage Loops”)A bondage loop allows access to all values inside a chain. It is, in essence, a “for-in” loop.Make Anna moan &quot;Array&quot;Bind Emma to Anna Make slave scream Emma( Prints &quot;A&quot;, &quot;r&quot;, &quot;r&quot;, &quot;a&quot;, &quot;y&quot; on individual lines )The important and neat thing here is that Emma is not a chain of length 1, but a fraction! This enables us to do many useful things.There are also while and until loops, which are the most self-explanatory things in this language.Checking for a specific ASCII-valueThis is one more tool we’re going to need to write somewhat understandable code. Let’s try some things:Make Anna moan &quot;A&quot;Lick Betty sixty five times(Print &quot;A&quot; two times)Make Slave scream AnnaMake Slave scream Betty(So, let&#39;s try...)x If Anna is &quot;A&quot; (Can&#39;t use string literals in comparison)x If Anna is Betty (Incompatible types)x If Anna is sixty five (Can&#39;t use number literals either, also wrong types)(So, uhmm....)Bind Emma to Anna (Anna is a string literal, but Emma is not - she is a fraction!) If Emma is Betty ( This works! )Neat.Iterating through a chain and assigning conditional valuesSo, now we can put these tools together to go from an input string to a series of conditional reactions, based on individual characters:( This program detects if a string contains two zeroes in a row )Make Anna moan &quot;11101010100&quot;Lick AsciiZero forty eight timesWorship ZeroesInARowLick limit two timesBind Emma to Anna If Emma is AsciiZero Lick ZeroesInARow If ZeroesInARow is limit Make Slave Scream &quot;00 detected!&quot; Otherwise Have ZeroesInARow Spank ZeroesInARowAnd with this, there is just one more construct to understand for my proof code to become obviousAdding to a ChainAdding to a Chain/String can be done with the ‘hogtie’-operator. Here, a fraction has to hogtie a chain, writing the byte on its end.( Generates the String &quot;abcd&quot; and prints it )Make Anna moanLick char ninety seven times ( Set to &quot;a&quot; )Worship counterLick loopmax four timesWhile counter is submissive to loopmax Lick counter Have char hogtie Anna Lick charMake slave scream AnnaAnd that’s it. We’ve now fully learned to juggle the data types and can begin writing the actual program - which is now fairly easy.Understanding the Turing completeness proofDisclaimer: I’m 99% sure my code can be simplified or improved. But I don’t care.To understand the steps the program takes, it’s probably best to look at my python generator code, which I wrote after completing the first version of the proof to expand the size of the Rule 110 board. Steps are:def main(): generateIntro() # Initialize required variables generateNumbers() # Initialize all required numbers, since you can&#39;t use literals in control flow # In the python code, this is inefficient, since I was too lazy to figure out how to spell the numbers, so I have many, many lines of licking beginLoop() # Literally just the while loop and condition resetTempVariables() # Does what it says setEmptyPositions() # That&#39;s also resetting, come to think of it incrementLoopCounter() # Again, obvious printCurrentState() # You probably get the idea getParentStrings() getDescendants() writeNextGeneration() # Print the next generation saveNextGeneration() # Save the next generation as current via bondage loopOkay, so everything I’ve commented is pretty much boring cruft - setting and resetting values, mostly. Let’s look at the other functions:getParentStrings()Here we loop through the current state of the automaton (via bondage loop + iteration counter), doing this for all but the outermost positions:If counter is submissive to number4 If counter is dominant towards number0 Have Emma hogtie position2This just builds a 3-character-Chain for each position, by taking its upper left, upper middle and upper right neighbor and saving it.getDescendants()This function requires a lot more code. First, we explicitly write the values of left, middle and right:Bind Emma to position2 if counter is number0 if Emma is AsciiZero Have AsciiZero lick left Otherwise Have AsciiOne lick left if counter is number1 if Emma is AsciiZero Have AsciiZero lick middle Otherwise Have AsciiOne lick middle if counter is number2 if Emma is AsciiZero Have AsciiZero lick right Otherwise Have AsciiOne lick right Lick counterLeft, middle, right and counter are of course reset before each position is calculated.Now we have three accessible variables for the current generation. A short if-tree gives us the calculated value for the next one:if left is AsciiOne if middle is AsciiOne if right is AsciiZero Have AsciiOne hogtie nextposition2 otherwise have AsciiZero hogtie nextposition2 if middle is AsciiZero if right is AsciiOne have AsciiOne hogtie nextposition2 otherwise have AsciiZero hogtie nextposition2if left is AsciiZero if middle is AsciiOne Have AsciiOne hogtie nextposition2 otherwise if right is AsciiOne Have AsciiOne hogtie nextposition2 otherwise have AsciiZero hogtie nextposition2And this is the entire trick. Rule 110 is incredibly simple, and thus very nice for these proofs.I really enjoyed figuring all this out. If you want to understand my proof in more detail,check out the code on Github or just ask.The Fetlang repository no longer says that it is probably turing complete - they are sure now." } ]
